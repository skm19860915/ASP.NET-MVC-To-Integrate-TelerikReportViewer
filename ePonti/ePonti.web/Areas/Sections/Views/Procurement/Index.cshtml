@using ePonti.BOL
@using GridMvc.Html
@using ePonti.BLL.Common
@model ePonti.web.Models.ProcurementResult
@{
    ViewBag.Title = "Procurement";
    var nav = Url.Nav(ePonti.BLL.Common.EnumWrapper.Pages.PorGrid, null);
}

<div class="col-sm-12 col-lg-12 container-fluid">
    <div class="row">
        <div class="col-sm-8 col-lg-8 mainGridText">@ViewBag.Title</div>
        <div class="buttons dropdown"></div>
    </div>
    <div class="container-fluid">
        <div class="bs-component">
            <input type="hidden" id="HDTabName" value="purchasing" />
            <ul class="nav nav-tabs tabText">
                <li class="active"><a href="#purchasing" data-toggle="tab">Purchasing</a></li>
                <li><a href="#custody" data-toggle="tab">Custody</a></li>
                <li><a href="#deliveries" data-toggle="tab">Deliveries</a></li>
                <li><a href="#transfers" data-toggle="tab">Transfers</a></li>
                <li><a href="#pending" data-toggle="tab">Pending</a></li>
                <li><a href="#inventory" data-toggle="tab">Inventory</a></li>
            </ul>
            <div id="procurementTabs" class="tab-content">
                <div class="tab-pane fade active in" id="purchasing">
                    @if (ViewBag.SyncSuccessMessage != null)
                    {
                        <div class="alert alert-success" role="alert" style="margin-top:60px">
                            <strong>Well done!</strong> @ViewBag.SyncSuccessMessage
                        </div>
                    }
                    @if (ViewBag.SyncErrorMessage != null)
                    {
                        <div class="alert alert-danger" role="alert" style="margin-top:60px">
                            An error occured : @ViewBag.SyncErrorMessage
                        </div>
                    }
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-sm-offset-8 dropdown buttons">
                                <input type="hidden" id="CreatedPOId" />
                                @if (ViewBag.IsQBConnected == true)
                                {
                                    <div class="modal fade" id="myModal" tabindex="-1" role="dialog" aria-labelledby="myModalLabel">
                                        <div class="modal-dialog" role="document">
                                            <div class="modal-content">
                                                <div class="modal-header">
                                                    <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">&times;</span></button>
                                                    <h4 class="modal-title" id="myModalLabel">Select Item Type</h4>
                                                </div>
                                                <div class="modal-body">
                                                    <div class="form-group">
                                                        <select id="selectType" class="form-control">
                                                            <option value="Inventory">Inventory</option>
                                                            <option value="NonInventory">Non Inventory</option>
                                                            <option value="Service">Service</option>
                                                        </select>
                                                    </div>
                                                </div>
                                                <div class="modal-footer">
                                                    <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>
                                                    <button type="button" class="btn btn-primary" id="ButtonSync">Sync</button>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                    <a style="cursor:pointer;" class="homeLinks save-item-info Sync"><img src="~/images/QbButton.png" width="30"></a>
                                }
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3 col-lg-2">
                                <div class="row">
                                    <div class="headerText"></div>
                                </div>
                                <div class="row">
                                    <div class="headerText"></div>
                                </div>
                                <div class="leftfilters">
                                    @using (Html.BeginForm("Index", "Procurement", FormMethod.Post, new { id = "LeftFiltersForm" }))
                                    {
                                        @Html.Hidden("SelectedType", "PO", new { @class = "SelectedType" })
                                        @Html.TextBox("SearchText", "", new { id = "txtSearch", placeholder = "Enter search text", @class = "srch_text" })
                                        if (ViewBag.VendorList != null)
                                        {
                                            <h4>Vendor</h4>
                                            <div class="checklists">
                                                @Html.Hidden("SelectedVendors", "", new { @class = "SelectedVendors" })
                                                @foreach (var item in ViewBag.VendorList)
                                                {
                                                    <div class="filtercheckbox">
                                                        <label>
                                                            <input type="checkbox" value="@item.VendorID" /> @item.Vendor
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        if (ViewBag.JobList != null)
                                        {
                                            <h4>Job</h4>
                                            <div class="checklists">
                                                @Html.Hidden("SelectedJobs", "", new { @class = "SelectedJobs" })
                                                @foreach (var item in ViewBag.JobList)
                                                {
                                                    <div class="filtercheckbox">
                                                        <label>
                                                            <input type="checkbox" value="@item.ProjectID" /> @item.Project
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        if (ViewBag.StatusList != null)
                                        {
                                            <h4>Status</h4>
                                            <div class="checklists">
                                                @Html.Hidden("SelectedStatus", "", new { @class = "SelectedStatus" })
                                                @foreach (var item in ViewBag.StatusList)
                                                {
                                                    <div class="filtercheckbox">
                                                        <label>
                                                            <input type="checkbox" value="@item.StautsID" /> @item.Status
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        <div class="row">
                                            <div class="headerText"></div>
                                        </div>
                                        <div class="buttons formLabelText">
                                            <input type="button" class="btn btn-default clearleftfilter" value="Clear" />
                                            <input type="button" class="btn btn-default updateleftfilter" value="Update" />
                                        </div>
                                    }
                                </div>
                            </div>
                            <div class="col-sm-8 col-lg-9 sectionGrids">
                                @(Html.Kendo().Grid<ePonti.BOL.GetPurchasingBySiteCoID_Result>()
                                                    .Name("Grid_Purchasing")

                                            .Columns(columns =>
                                            {
                                                columns.Bound(p => p.ViewID).Title("").ClientTemplate("<a href=\"" + @Url.Action("details", "porinfo", new { area = "procurement", id = "#= ViewID #", nav }) + "\"><img src=\"" + Url.Content("~/images/View.png") + "\" width=\"25\"></a>").Width(50);
                                                columns.Bound(p => p.Por).Title("POR#").Width("15em");
                                                columns.Bound(p => p.Vendor).Title("Vendor").Width("25em");
                                                columns.Bound(p => p.Job).Title("Job");
                                                columns.Bound(p => p.Status).Title("Status").Width("15em");
                                                columns.Bound(p => p.Order).Title("Order").Format("{0:MM/dd/yyyy}").Width("10em");
                                                columns.Bound(p => p.Arrival).Title("Arrival").Format("{0:MM/dd/yyyy}").Width("10em");
                                            })
                                            .Editable(editable => editable.Mode(GridEditMode.InLine))
                                            .Navigatable()
                                            .Pageable()
                                            //.Pageable(pageable =>
                                            //{
                                            //    pageable.PageSizes(new int[] {15, 20 });
                                            //})
                                            .Sortable()
                                            .Scrollable(scr => scr.Height("auto"))
                                            .DataSource(dataSource => dataSource  // Configure the grid data source
                                            .Ajax()
                                            .Model(model =>
                                            {
                                                model.Id(x => x.ViewID);
                                            })
                                            .Read(read => read.Action("GetProcurement", "Procurement").Data("PurchaseListFilterData")) // Set the action method which will return the data in JSON format
                                            .PageSize(25)

                                            ))
                            </div>
                        </div>
                        <div class="row">
                            <div class="headerText"></div>
                        </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="custody">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="col-sm-offset-8 dropdown buttons">
                                <button role="button" class="btn btn-default transfer" data-url="@Url.Action("Create","TransferInfo", new { area = "procurement",porid="PORID", PorItemIDs="ITEMIDS", nav})">Transfer</button>
                                <span>
                                    <button role="button" class="btn btn-default btnRTI" data-url="@Url.Action("Create","ReturnInfo", new { area = "procurement",porid="PORID",projectID="PROJECT_ID", ItemIDs="ITEMIDS", nav})">RTI</button>
                                </span>
                                <span>
                                    <button role="button" class="btn btn-default">RTM</button>
                                </span>
                                <span>
                                    <button role="button" class="btn btn-default">Label</button>
                                </span>
                                <span>
                                    <button role="button" class="btn btn-default updateselected" data-url="@Url.Action("updateSelected","porInfo", new { area = "procurement", PorItemIDs="ITEMIDS", nav})">Update</button>
                                </span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-3 col-lg-2">
                                <div class="row">
                                    <div class="headerText"></div>
                                </div>
                                <div class="row">
                                    <div class="headerText"></div>
                                </div>
                                <div class="leftfilters">
                                    @using (Html.BeginForm("Index", "Procurement", FormMethod.Post, new { id = "LeftFiltersForm" }))
                                    {
                                        @Html.Hidden("SelectedType", "Custody", new { @class = "SelectedType" })
                                        @Html.TextBox("SearchText", "", new { id = "txtSearch", placeholder = "Enter search text", @class = "srch_text" })
                                        if (ViewBag.VendorList != null)
                                        {
                                            <h4>Vendor</h4>
                                            <div class="checklists">
                                                @Html.Hidden("SelectedVendors", "", new { @class = "SelectedVendors" })
                                                @foreach (var item in ViewBag.VendorList)
                                                {
                                                    <div class="filtercheckbox">
                                                        <label>
                                                            <input type="checkbox" value="@item.VendorID" /> @item.Vendor
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        if (ViewBag.JobList != null)
                                        {
                                            <h4>Job</h4>
                                            <div class="checklists">
                                                @Html.Hidden("SelectedJobs", "", new { @class = "SelectedJobs" })
                                                @foreach (var item in ViewBag.JobList)
                                                {
                                                    <div class="filtercheckbox">
                                                        <label>
                                                            <input type="checkbox" value="@item.ProjectID" /> @item.Project
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        if (ViewBag.SelectPORList != null)
                                        {
                                            <h4>POR#</h4>
                                            <div class="checklists">
                                                @Html.Hidden("SelectedPOR", "", new { @class = "SelectedPOR" })
                                                @foreach (var item in ViewBag.SelectPORList)
                                                {
                                                    <div class="filtercheckbox">
                                                        <label>
                                                            <input type="checkbox" value="@item.PorID" /> @item.Number
                                                        </label>
                                                    </div>
                                                }
                                            </div>
                                        }
                                        <div class="row">
                                            <div class="headerText"></div>
                                        </div>
                                        <div class="buttons formLabelText">
                                            <input type="button" class="btn btn-default clearleftfilter" value="Clear" />
                                            <input type="submit" class="btn btn-default updateleftfilter" value="Update" />
                                        </div>
                                    }
                                </div>
                            </div>
                            <div id="custody-grid" class="col-sm-8 col-lg-9 sectionGrids">
                                @(Html.Kendo().Grid(Model.CustodyList)
                                     .Name("Grid_Custody")

                                     .Columns(columns =>
                                     {
                                         columns.Bound(p => p.ViewID).ClientTemplate("<input type=\"checkbox\" class=\"check\" /><input type=\"hidden\" class=\"item-id\" value=\"#= ViewID #\" /><input type=\"hidden\" class=\"por-id\" value=\"#= PorID #\" /><input type=\"hidden\" class=\"project-id\" value=\"#= ProjectID #\" />").Title("").Width(50);
                                         columns.Bound(p => p.ViewID).Title("").ClientTemplate("<a href=\"" + @Url.Action("Update", "porinfo", new { area = "procurement", id = "#=ViewID#", nav }) + "\"><img src=\"" + Url.Content("~/images/View.png") + "\" width=\"25\"></a>").Width(50);
                                         columns.Bound(p => p.Manufacturer).Title("Manufacturer").Width("12em");
                                         columns.Bound(p => p.Model).Title("Item").Width("18em");
                                         columns.Bound(p => p.Job).Title("Job");
                                         columns.Bound(p => p.Por).Title("POR#").Width("9em");
                                         columns.Bound(p => p.Vendor).Title("Vendor").Width("13em");
                                         columns.Bound(p => p.Order).Title("Order").Format("{0:MM/dd/yyyy}").Width("7em");
                                         columns.Bound(p => p.Arrival).Title("Arrival").Format("{0:MM/dd/yyyy}").Width("7em");
                                         columns.Bound(p => p.Location).Title("Location").Width("7em");
                                         columns.Bound(p => p.Delivered).Title("Delivered").Format("{0:MM/dd/yyyy}").Width("7em");
                                     })

                                    .Editable(editable => editable.Mode(GridEditMode.InLine))
                                     .Navigatable()
                                     .Pageable()
                                     //.Pageable(pageable =>
                                     //{
                                     //    pageable.PageSizes(new int[] {15, 20 });
                                     //})
                                     .Sortable()
                                     .Scrollable(scr => scr.Height("auto"))
                                     .DataSource(dataSource => dataSource  // Configure the grid data source
                                     .Ajax()
                                     .Model(model =>
                                     {
                                         model.Id(x => x.ViewID);
                                     })
                                       .Read(read => read.Action("GetProcurement", "Procurement").Data("CustodyFilterData")) // Set the action method which will return the data in JSON format
                                       .PageSize(25)

                                      )
                                )
                            </div>
                        </div>
                        <div class="row">
                            <div class="headerText"></div>
                        </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="deliveries">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="headerText"></div>
                        </div>
                        <div class="row">
                            <div class="headerText"></div>
                        </div>
                        <div class="row">
                            <div class="col-sm-offset-8 dropdown buttons"></div>
                        </div>
                        <div class="row">
                            <div class="col-sm-offset-3 col-sm-7 col-lg-offset-2 col-lg-6 sectionGrids">
                                @(Html.Kendo().Grid(Model.DeliveryList)
                                   .Name("Grid_Deliveries")
                                   .Columns(columns =>
                                   {
                                       columns.Bound(p => p.ViewID).Title("").ClientTemplate("<a href=\"" + Url.Action("details", "deliveryinfo", new { area = "procurement", id = "#=ViewID#", nav }) + "\"><img src=\"" + Url.Content("~/images/View.png") + "\" width=\"25\"></a>").Width(50);
                                       columns.Bound(p => p.Delivery_).Title("Delivery#").Width("20em");
                                       columns.Bound(p => p.Project).Title("Project");
                                       columns.Bound(p => p.Date).Title("Date").Format("{0:MM/dd/yyyy}").Width("10em");
                                       columns.Bound(p => p.Status).Title("Status").Width("10em");

                                   })

                                  .Editable(editable => editable.Mode(GridEditMode.InLine))
                                   .Navigatable()
                                   .Pageable()
                                   //.Pageable(pageable =>
                                   //{
                                   //    pageable.PageSizes(new int[] {15, 20 });
                                   //})
                                   .Sortable()
                                   .Scrollable(scr => scr.Height("auto"))
                                   .DataSource(dataSource => dataSource  // Configure the grid data source
                                   .Ajax()
                                   .Model(model =>
                                   {
                                       model.Id(x => x.ViewID);
                                   })
                                     .Read(read => read.Action("GetProcurement", "Procurement").Data("FilterData")) // Set the action method which will return the data in JSON format
                                     .PageSize(25)

                                    )
                                )
                            </div>
                        </div>
                        <div class="row">
                            <div class="headerText"></div>
                        </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="transfers">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="headerText"></div>
                        </div>
                        <div class="row">
                            <div class="headerText"></div>
                        </div>
                        <div class="row">
                            <div class="col-sm-offset-8 dropdown buttons">
                                <button role="button" class="btn btn-default">Transfer</button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-offset-3 col-sm-9 col-lg-offset-2 col-lg-8 sectionGrids">
                                @(Html.Kendo().Grid(Model.TransferList)
                                    .Name("Grid_Transfers")
                                    .Columns(columns =>
                                    {
                                        columns.Bound(p => p.ViewID).Title("").ClientTemplate("<a href=\"" + Url.Action("details", "transferinfo", new { area = "procurement", id = "#=ViewID#", nav }) + "\"><img src=\"" + Url.Content("~/images/View.png") + "\" width=\"25\"></a>").Width(50);
                                        columns.Bound(p => p.Type).Title("Type").Width("15em");
                                        columns.Bound(p => p.Transfer).Title("Transfer#").Width("10em");
                                        columns.Bound(p => p.FromProject).Title("From Job");
                                        columns.Bound(p => p.ToProject).Title("To Job");
                                        columns.Bound(p => p.ToPor).Title("To POR#").Width("10em");

                                    })

                                    .Editable(editable => editable.Mode(GridEditMode.InLine))
                                    .Navigatable()
                                    .Pageable()
                                    //.Pageable(pageable =>
                                    //{
                                    //    pageable.PageSizes(new int[] {15, 20 });
                                    //})
                                    .Sortable()
                                    .Scrollable(scr => scr.Height("auto"))
                                    .DataSource(dataSource => dataSource  // Configure the grid data source
                                    .Ajax()
                                    .Model(model =>
                                    {
                                        model.Id(x => x.ViewID);
                                    })
                                      .Read(read => read.Action("GetProcurement", "Procurement").Data("FilterData")) // Set the action method which will return the data in JSON format
                                      .PageSize(25)

                                     )
                                )
                            </div>
                        </div>
                        <div class="row">
                            <div class="headerText"></div>
                        </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="pending">
                    <div class="container-fluid">
                        <div class="row">
                            <div class="headerText"></div>
                        </div>
                        <div class="row">
                            <div class="headerText"></div>
                        </div>
                        <div class="row">
                            <div class="col-sm-offset-8 dropdown buttons">
                                <button role="button" class="btn btn-default">Return</button>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-offset-3 col-sm-9 col-lg-offset-2 col-lg-8 sectionGrids">
                                @(Html.Kendo().Grid(Model.PendingList)
                                .Name("Grid_Inventory")
                                .Columns(columns =>
                                {
                                columns.Bound(p => p.ViewID).Title("").ClientTemplate("<input class='item - id' type='checkbox' data-id='#ViewID#'></a>").Width(50);
                                columns.Bound(p => p.Job).Title("Job");
                                columns.Bound(p => p.Cor).Title("COR#").Width("15em");
                                columns.Bound(p => p.Manufacturer).Title("Manufacturer").Width("20em");
                                columns.Bound(p => p.Model).Title("Item");
                                columns.Bound(p => p.Qty).Title("Qty").Width("5em");
                                columns.Bound(p => p.Por).Title("POR#").Width("10em");

                                })

                                .Editable(editable => editable.Mode(GridEditMode.InLine))
                                .Navigatable()
                                .Pageable()
                                //.Pageable(pageable =>
                                //{
                                //    pageable.PageSizes(new int[] {15, 20 });
                                //})
                                .Sortable()
                                .Scrollable(scr => scr.Height("auto"))
                                .DataSource(dataSource => dataSource  // Configure the grid data source
                                .Ajax()
                                .Model(model =>
                                {
                                model.Id(x => x.ViewID);
                                })
                                .Read(read => read.Action("GetProcurement", "Procurement").Data("FilterData")) // Set the action method which will return the data in JSON format
                                .PageSize(25)

                                )
                                )
                            </div>
                        </div>
                        <div class="row">
                            <div class="headerText"></div>
                        </div>
                    </div>
                </div>
                <div class="tab-pane fade" id="inventory">
                    <div class="col-sm-9 container-fluid">
                        <div class="row">
                            <div class="col-sm-offset-8 dropdown buttons">
                                <button role="button" class="btn btn-default">Account</button>
                                <span>
                                    <button role="button" class="btn btn-default">Update</button>
                                </span>
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-sm-10 sectionGrids">
                            </div>
                        </div>
                        <div class="row">
                            <div class="headerText"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script>
        $('.Sync').click(function () {
            var PORs = "";
            $('input:checkbox:checked.PORID').each(function () {
                PORs = PORs + $(this).attr("data-id") + ",";
            });
            if (PORs != "") {
                $.ajax({
                    url: "@Url.Action("CheckNewItems")",
                    type: "POST",
                    data: JSON.stringify({ 'PORs': PORs }),
                    dataType: "json",
                    traditional: true,
                    contentType: "application/json; charset=utf-8",
                    success: function (data) {
                        //alert(data);
                        if (data) {
                            $('#CreatedPOId').val(PORs);
                            $('#myModal').modal('show');
                        } else {
                            location.href = "@Url.Action("SyncPOR")" + "?PORs=" + PORs;
                        }
                    },
                    error: function () {
                        alert("An error has occured!!!");
                    }
                });

                @*if (1 == 1) {
                    location.href = "@Url.Action("SyncPOR")" + "?PORs=" + PORs;
                }
                else {
                    $('#CreatedPOId').val(PORs);
                    $('#myModal').modal('show');
                }*@
            }
        });
        $(document).on('click', '#ButtonSync', function () {
            $(this).attr("disabled", "disabled");
            $(this).text('Please wait....');
            location.href = "@Url.Action("SyncPOR")" + "?PORs=" + $('#CreatedPOId').val() + "&ItemType=" + $('#selectType').val();
            //document.location = '/Common/items/SyncToQBItems/' + $('#CreatedPOId').val() + "&ItemType=" + $('#selectType').val();
        });
        $('.transfer').on('click', function () {
            var url = $(this).data('url');
            var items = $('#custody-grid').find('.check:checked').siblings('.item-id')
                .map(function (i, e) {
                    return $(e).val()
                }).get().join(',');
            var porids = $('#custody-grid').find('.check:checked').siblings('.por-id')
                .map(function (i, e) {
                    return $(e).val()
                }).get().join(',');
            url = url.replace('ITEMIDS', items);
            url = url.replace('PORID', porids);
            if (porids.trim() != "") {
                document.location = url;
            }
        });
        $('.btnRTI').on('click', function () {
            var url = $(this).data('url');
            var projectids = $('#custody-grid').find('.check:checked').siblings('.project-id')
                .map(function (i, e) {
                    return $(e).val()
                }).get().join(',');
            var items = $('#custody-grid').find('.check:checked').siblings('.item-id')
                .map(function (i, e) {
                    return $(e).val()
                }).get().join(',');
            var porids = $('#custody-grid').find('.check:checked').siblings('.por-id')
                .map(function (i, e) {
                    return $(e).val()
                }).get().join(',');
            url = url.replace('PROJECT_ID', projectids);
            url = url.replace('ITEMIDS', items);
            url = url.replace('PORID', porids);
            if (projectids.trim() != "") {
                document.location = url;
            }
        });
        $('.updateselected').on('click', function () {
            var url = $(this).data('url');
            var items = $('#custody-grid').find('.check:checked').siblings('.item-id')
                .map(function (i, e) {
                    console.log(e);
                    return $(e).val()
                }).get().join(',');

            url = url.replace('ITEMIDS', items);

            document.location = url;
        });
    </script>
    <script type="text/javascript">
        $(document).ready(function () {
            $(".nav-tabs li a").click(function () {
                $.cookie('saved-tab', $(this).attr("href").replace("#", ""));

                $(".nav-tabs li").each(function () {

                    if ($(this).find("a").hasClass("Selected")) {

                        $(this).find("a").removeClass("Selected")
                    }

                })
                $(this).addClass("Selected");

                var ProcurementType = $(this).text();
                $("#Grid_" + ProcurementType).data('kendoGrid').dataSource.read();
                $("#Grid_" + ProcurementType).data('kendoGrid').refresh();

            });
            if ($.cookie('saved-tab') != '') {
                $('.nav-tabs a[href="#' + $.cookie('saved-tab') + '"]').tab('show');
            }
            loadFilterFunctions();
        });

        function PurchaseListFilterData() {
            var ProcurementType = "";
            var SelectedType = "";
            var SearchText = "";
            var SelectedVendors = "";
            var SelectedJobs = "";
            var SelectedStatus = "";

            $(".nav-tabs li").each(function () {

                if ($(this).find("a").hasClass("Selected")) {

                    ProcurementType = $(this).text();

                }

            })
            
            SelectedType = $("#purchasing").find("[id^='SelectedType']").val();
            SearchText = $("#purchasing").find("[id^='txtSearch']").val();
            SelectedVendors = $("#purchasing").find("[id^='SelectedVendors']").val();
            SelectedJobs = $("#purchasing").find("[id^='SelectedJobs']").val();
            SelectedStatus = $("#purchasing").find("[id^='SelectedStatus']").val();

            return {
                ProcurementType: ProcurementType,
                SearchText: SearchText,
                SelectedType: SelectedType,
                SelectedJobs: SelectedJobs,
                SelectedStatus: SelectedStatus


            };
        }
        function CustodyFilterData() {
            var ProcurementType = "";
            var SelectedType = "";
            var SearchText = "";
            var SelectedVendors = "";
            var SelectedJobs = "";
            var SelectedPOR = "";

            $(".nav-tabs li").each(function () {

                if ($(this).find("a").hasClass("Selected")) {

                    ProcurementType = $(this).text();

                }

            })

            SelectedType = $("#custody").find("[id^='SelectedType']").val();
            SearchText = $("#custody").find("[id^='txtSearch']").val();
            SelectedVendors = $("#custody").find("[id^='SelectedVendors']").val();
            SelectedJobs = $("#custody").find("[id^='SelectedJobs']").val();
            SelectedPOR = $("#custody").find("[id^='SelectedPOR']").val();
            
            return {
                ProcurementType: ProcurementType,
                SearchText: SearchText,
                SelectedType: SelectedType,
                SelectedJobs: SelectedJobs,
                SelectedPOR: SelectedPOR


            };
        }


        function FilterData() {
            var ProcurementType = "";

            $(".nav-tabs li").each(function () {

                if ($(this).find("a").hasClass("Selected")) {

                    ProcurementType = $(this).text();

                }

            })
            return {
                ProcurementType: ProcurementType,

            };
        }


        $("#purchasing").find(".updateleftfilter").on("click", function () {
            
           
            var ProcurementType = "Purchasing";
            

            $(".nav-tabs li").each(function () {

                if ($(this).find("a").hasClass("Selected")) {

                    ProcurementType = $(this).text();

                }

            })
            $("#Grid_" + ProcurementType).data('kendoGrid').dataSource.read();
            $("#Grid_" + ProcurementType).data('kendoGrid').refresh();
            return;
        })

    </script>
}
